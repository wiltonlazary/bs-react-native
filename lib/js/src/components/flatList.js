// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var ReactNative = require("react-native");
var UtilsRN$BsReactNative = require("../private/utilsRN.js");

function scrollToEnd(ref, animated) {
  ref.scrollToEnd({
        animated: animated
      });
  return /* () */0;
}

function scrollToIndex(ref, index, animated, viewOffset, viewPosition, _) {
  ref._scrollToIndex({
        index: index,
        viewOffset: Js_undefined.fromOption(viewOffset),
        viewPosition: Js_undefined.fromOption(viewPosition),
        animated: Js_undefined.fromOption(animated)
      });
  return /* () */0;
}

function scrollToItem(ref, item, animated, viewPosition, _) {
  ref._scrollToIndex({
        item: item,
        viewPosition: Js_undefined.fromOption(viewPosition),
        animated: Js_undefined.fromOption(animated)
      });
  return /* () */0;
}

function scrollToOffset(ref, offset, animated, _) {
  ref._scrollToIndex({
        offset: Js_undefined.fromOption(offset),
        animated: Js_undefined.fromOption(animated)
      });
  return /* () */0;
}

function renderItem(reRenderItem, jsRenderBag) {
  return Curry._1(reRenderItem, /* record */[
              /* item */jsRenderBag.item,
              /* index */jsRenderBag.index
            ]);
}

function separatorComponent(reSeparatorComponent, jsSeparatorProps) {
  return Curry._1(reSeparatorComponent, /* record */[
              /* highlighted */jsSeparatorProps.highlighted,
              /* leadingItem */Js_primitive.undefined_to_opt(jsSeparatorProps.leadingItem)
            ]);
}

function make(data, renderItem, keyExtractor, itemSeparatorComponent, bounces, listFooterComponent, listHeaderComponent, columnWrapperStyle, extraData, getItemLayout, horizontal, initialNumToRender, initialScrollIndex, inverted, numColumns, onEndReached, onEndReachedThreshold, onRefresh, onViewableItemsChanged, overScrollMode, pagingEnabled, refreshing, removeClippedSubviews, scrollEnabled, showsHorizontalScrollIndicator, showsVerticalScrollIndicator, windowSize, maxToRenderPerBatch, viewabilityConfig, onScroll, style) {
  var partial_arg = {
    bounces: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(bounces)),
    ItemSeparatorComponent: Js_undefined.fromOption(itemSeparatorComponent),
    ListFooterComponent: Js_undefined.fromOption(listFooterComponent),
    ListHeaderComponent: Js_undefined.fromOption(listHeaderComponent),
    columnWrapperStyle: Js_undefined.fromOption(columnWrapperStyle),
    data: data,
    extraData: Js_undefined.fromOption(extraData),
    getItemLayout: Js_undefined.fromOption(UtilsRN$BsReactNative.option_map((function (f, data, index) {
                return Curry._2(f, data === undefined ? /* None */0 : [data], index);
              }), getItemLayout)),
    horizontal: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(horizontal)),
    initialNumToRender: Js_undefined.fromOption(initialNumToRender),
    initialScrollIndex: Js_undefined.fromOption(initialScrollIndex),
    inverted: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(inverted)),
    keyExtractor: keyExtractor,
    numColumns: Js_undefined.fromOption(numColumns),
    onEndReached: Js_undefined.fromOption(onEndReached),
    onEndReachedThreshold: Js_undefined.fromOption(onEndReachedThreshold),
    onRefresh: Js_undefined.fromOption(onRefresh),
    onViewableItemsChanged: Js_undefined.fromOption(onViewableItemsChanged),
    overScrollMode: Js_undefined.fromOption(UtilsRN$BsReactNative.option_map((function (x) {
                if (x !== -958984497) {
                  if (x >= 422592140) {
                    return "never";
                  } else {
                    return "auto";
                  }
                } else {
                  return "always";
                }
              }), overScrollMode)),
    pagingEnabled: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(pagingEnabled)),
    refreshing: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(refreshing)),
    renderItem: renderItem,
    removeClippedSubviews: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(removeClippedSubviews)),
    scrollEnabled: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(scrollEnabled)),
    showsHorizontalScrollIndicator: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(showsHorizontalScrollIndicator)),
    showsVerticalScrollIndicator: Js_undefined.fromOption(UtilsRN$BsReactNative.optBoolToOptJsBoolean(showsVerticalScrollIndicator)),
    windowSize: Js_undefined.fromOption(windowSize),
    maxToRenderPerBatch: Js_undefined.fromOption(maxToRenderPerBatch),
    viewabilityConfig: Js_undefined.fromOption(viewabilityConfig),
    onScroll: Js_undefined.fromOption(onScroll),
    style: Js_undefined.fromOption(style)
  };
  var partial_arg$1 = ReactNative.FlatList;
  return (function (param) {
      return ReasonReact.wrapJsForReason(partial_arg$1, partial_arg, param);
    });
}

exports.scrollToEnd = scrollToEnd;
exports.scrollToIndex = scrollToIndex;
exports.scrollToItem = scrollToItem;
exports.scrollToOffset = scrollToOffset;
exports.renderItem = renderItem;
exports.separatorComponent = separatorComponent;
exports.make = make;
/* ReasonReact Not a pure module */
